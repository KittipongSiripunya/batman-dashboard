import streamlit as st
import os
from PIL import Image

# === CONFIG ===
BASE_DIR = "data"

st.title("üé¨ Eye-Tracking Heatmap Viewer")
st.markdown("üëÅÔ∏è‚Äçüó®Ô∏è ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏õ (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ snapshot ‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")

# 1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"
movies = sorted([f for f in os.listdir(BASE_DIR) if os.path.isdir(os.path.join(BASE_DIR, f))])
selected_movie = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á", movies)

# 2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Ñ‡∏•‡∏¥‡∏õ"
clips_path = os.path.join(BASE_DIR, selected_movie)
clips = sorted([f for f in os.listdir(clips_path) if os.path.isdir(os.path.join(clips_path, f))])
selected_clip = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏•‡∏¥‡∏õ‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á", clips)

# 3. ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ô‡∏±‡πâ‡∏ô
clip_path = os.path.join(clips_path, selected_clip)
image_files = sorted([
    f for f in os.listdir(clip_path)
    if f.lower().endswith((".png", ".jpg")) and f[:2].isdigit()
])

# ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ
seconds_available = [int(f[:2]) for f in image_files if f[:2].isdigit()]
seconds_available = sorted(list(set(seconds_available)))

# 4. ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û
show_all = st.checkbox("üñºÔ∏è ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 30 ‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö Grid")

if show_all:
    st.markdown("### üî≥ ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (0s‚Äì29s)")
    cols = st.columns(6)
    for sec in range(30):
        filename = f"{sec:02d}.jpg"
        path = os.path.join(clip_path, filename)
        if os.path.exists(path):
            img = Image.open(path)
            with cols[sec % 6]:
                st.image(img, caption=f"{sec}s", use_container_width=True)
else:
    if seconds_available:
        selected_sec = st.slider("‚è±Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (s)", min_value=min(seconds_available), max_value=max(seconds_available), value=min(seconds_available))
        filename = f"{selected_sec:02d}.jpg"
        img_path = os.path.join(clip_path, filename)
        if os.path.exists(img_path):
            img = Image.open(img_path)
            st.image(img, caption=f"{selected_sec}s", use_container_width=True)
        else:
            st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û")
    else:
        st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ô‡∏µ‡πâ")
# === Optional: ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô GIF ‡πÅ‡∏ó‡∏ô Grid ===

import io
import imageio.v2 as imageio  # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö streamlit ‡πÑ‡∏î‡πâ‡∏î‡∏µ

show_gif = st.checkbox("üéûÔ∏è ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô GIF Animation (0s‚Äì29s)")

if show_gif:
    images = []
    for sec in range(30):
        filename = f"{sec:02d}.jpg"
        path = os.path.join(clip_path, filename)
        if os.path.exists(path):
            img = Image.open(path).convert("RGB")
            images.append(img)

    if images:
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô GIF ‡∏•‡∏á memory
        gif_bytes = io.BytesIO()
        imageio.mimsave(gif_bytes, images, format="GIF", duration=0.3)
        st.image(gif_bytes.getvalue(), caption="GIF 0s‚Äì29s", use_container_width=True)
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á GIF")        